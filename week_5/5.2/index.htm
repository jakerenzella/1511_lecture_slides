<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<meta name="viewport" content="viewport-fit=cover, width=device-width, height=device-height, initial-scale=1" />
<link rel="stylesheet" href="engine/main.css">
<link rel="stylesheet" href="theme/zurich.css">
<link rel="stylesheet" href="engine/katex/katex.min.css">
<style>
:root{
--logo: ;
--darkaccent1color: #000;
--lightaccent1color: #FFF;
--accent2: #43aa8b;
--accent3: #f9c74f;
--accent4: #90be6d;
--accent5: #f8961e;
--accent6: #577590;
--lighttitletextcolor: #FFF;
--darktitletextcolor: #000;
--lightbodytextcolor: #FFF;
--darkbodytextcolor: #000;
--lightbackgroundcolor: #FFF;
--darkbackgroundcolor: #000;
--bodyfont: Helvetica;
--titlefont: Helvetica;
--lightframecolor: #FFFFFF;
--darkframecolor: #000000;
}Â 

</style>
</head>
<body class="responsive">
<div class="reveal">
<div class="slides">
<section class="fixed-size-headings light cover-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-cover" style="width: 100%; font-size: 1rem;">
        <div style=""><h1 id="pointers">Pointers</h1></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light title-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-title" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="helpsessions">Help Sessions</h2>

<p>Check timetable!</p></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light title-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-title" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="revisionsessionsreminder">Revision sessions reminder</h2></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light title-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-title" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="pointers">Pointers</h2></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="memory">Memory</h2>

<ul>
<li>All data (variables) are stored in <strong>memory</strong></li>
<li>You can think of memory as a big grid</li>
<li>Each segment of this grid has a unique identifier</li>
</ul></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default media-grid" style="width: 100%; font-size: 1rem;">
        <div style=""><p>Visualising memory with addresses</p>
<div class="single-image-wrapper"><figure><img src="images/Clipboard_6.png" class=" size-contain position-center-center"></figure></div></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light v-split-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-v-split media-grid" style="width: 100%; font-size: 1rem;">
        <div style=""><h3 id="sofarwehaveonlydealtwithvalues">So far, we have only dealt with values</h3>

<ul>
<li>We can also access the address</li>
<li>By storing that address in a variable, we have a <strong>pointer</strong></li>
</ul></div>
        <figure style=""><img src="images/Clipboard_7.png" class=" size-contain position-center-center"></figure>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
</section><section class="fixed-size-headings light section-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-section" style="width: 100%; font-size: 1rem;">
        <div style="">
          <h3 id="pointersyntax">Pointer Syntax</h3>

<h4 id="todeclareapointer">To declare a pointer</h4>

<p><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span> *<span class="hljs-tag">&lt;<span class="hljs-name">name_of_variable</span>&gt;</span></code></p>

<p>^ The <code class="hljs gams"><span class="hljs-comment">*</span></code> means don't request the storage to store <code class="hljs elm">&lt;<span class="hljs-keyword">type</span>&gt;</code>, but requests memory to store a memory address of <code class="hljs elm">&lt;<span class="hljs-keyword">type</span>&gt;</code></p>
        </div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
</section><section class="fixed-size-headings light section-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-section" style="width: 100%; font-size: 1rem;">
        <div style="">
          <h3 id="syntaxexample:">Syntax example:</h3>

<p><code class="hljs fortran"><span class="hljs-built_in">int</span> *<span class="hljs-keyword">pointer</span></code></p>

<p><code class="hljs gauss"><span class="hljs-keyword">struct</span> <span class="hljs-type">student</span> *student</code></p>
        </div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default media-grid" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="visualisepointerdeclaration">Visualise pointer declaration</h2>

<pre><code class="c hljs c-like"><span class="hljs-comment">// declare a pointer to an integer</span>
<span class="hljs-keyword">int</span> *number; <span class="hljs-comment">// operating system returns 0x17</span>
</code></pre>
<div class="single-image-wrapper"><figure><img src="images/Clipboard_9.png" class=" position-left-center"></figure></div></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 1rem;">
        <div style=""><h3 id="addressofoperator"><em>Address of</em> operator <code class="hljs 1c"><span class="hljs-meta">&amp;</span></code></h3>

<ul>
<li>What if we want to query what the address of a variable is?</li>
<li>We can use the address_of operator:</li>
</ul>

<h3 id=""><code class="hljs 1c"><span class="hljs-meta">&amp;</span></code></h3></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="syntaxofaddressof:variable">Syntax of address of: <code class="hljs 1c"><span class="hljs-meta">&amp;&lt;variable&gt;</span></code></h2>

<h3 id="example">Example</h3>

<pre><code class="c hljs c-like"><span class="hljs-keyword">int</span> number = <span class="hljs-number">2</span>;
&amp;number <span class="hljs-comment">// the address of number</span>
</code></pre></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default media-grid" style="width: 100%; font-size: 1rem;">
        <div style=""><pre><code class="c hljs c-like"><span class="hljs-keyword">int</span> number = <span class="hljs-number">2</span>;


<span class="hljs-keyword">int</span> *pointer_to_number = &amp;number
</code></pre>
<div class="single-image-wrapper"><figure><img src="images/Clipboard_10.png" class=" size-contain position-center-center"></figure></div></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 0.906rem;">
        <div style=""><h2 id="dereferencing">Dereferencing</h2>

<ul>
<li>Dereferencing is simply accessing the value at the address of a pointer</li>
<li>It uses the <code class="hljs gams"><span class="hljs-comment">*</span></code> symbol again (which causes confusion)</li>
<li><code class="hljs gams"><span class="hljs-comment">*my_int_pointer</span></code> -&gt; will get the integer at the address location</li>
</ul></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present fit-warning has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 0.672rem;">
        <div style=""><h2 id="threecomponentstopointersincode">Three components to pointers in code</h2>

<pre><code class="c hljs c-like"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>{
    <span class="hljs-comment">// Declare an integer</span>
    <span class="hljs-keyword">int</span> my_age = <span class="hljs-number">23</span>;

    <span class="hljs-comment">// Declare an integer pointer</span>
    <span class="hljs-comment">// Assign it the address of my_age</span>
    <span class="hljs-keyword">int</span> *pointer_to_my_age = &amp;my_age;

    <span class="hljs-comment">// Print out the address and value at the pointer</span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Pointer is: %p value is: %d\n"</span>, pointer_to_my_age, *pointer_to_my_age)
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="commonmistakes">Common mistakes</h2>

<pre><code class="c hljs c-like"><span class="hljs-keyword">int</span> number;
<span class="hljs-keyword">int</span> *number_ptr;
</code></pre>

<ol>
<li><code class="hljs ini"><span class="hljs-attr">number_ptr</span> = number<span class="hljs-comment">;</span></code></li>
<li><code class="hljs 1c">*number_ptr = <span class="hljs-meta">&amp;number;</span></code></li>
</ol></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="syntaxcheatsheet">Syntax cheat sheet</h2>

<ul>
<li>Declare a pointer: <code class="hljs angelscript"><span class="hljs-built_in">int</span> *<span class="hljs-built_in">int</span>_pointer;</code></li>
<li>Address of: <code class="hljs 1c"><span class="hljs-meta">&amp;my_variable;</span></code></li>
<li>Dereference (Get the value at a pointer): <code class="hljs abnf">*int_pointer<span class="hljs-comment">;</span></code></li>
</ul></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 0.953rem;">
        <div style=""><h2 id="demo">Demo</h2>

<p>Goals:</p>

<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="">Create a variable</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="">Get the address of that variable</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="">Create a pointer variable

<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="">Use it!</li>
</ul></li>
</ul></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="butjakewhyaretheyuseful">But JAKE, why are they <em>USEFUL</em></h2>

<ul>
<li>Let's look at an example with pointers and parameters</li>
</ul></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light cover-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-cover" style="width: 100%; font-size: 1rem;">
        <div style=""><h1 id="howcanweeditavariablewithinafunction">How can we edit a variable within a function?</h1></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present fit-warning has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 0.578rem;">
        <div style=""><h2 id="passbyreference">Pass by reference*</h2>

<pre><code class="c hljs c-like"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change_value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *x)</span> </span>{ 
        *x = *x * <span class="hljs-number">2</span>;
    }

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>{
  <span class="hljs-keyword">int</span> x = <span class="hljs-number">5</span>;
  change_value(&amp;x);
  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, x);

  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre>

<ul>
<li>Technically pass-reference-by-value but it's fine!</li>
</ul></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 1rem;">
        <div style=""><p>In the previous example, by passing the memory address, we can change the value <em>in place</em> and main will point to the updated value!</p></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present fit-warning has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 0.719rem;">
        <div style=""><h2 id="pointersandarraysð¤¯">pointers and arrays ð¤¯</h2>

<pre><code class="c hljs c-like"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">double_array_of_ints</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data[], <span class="hljs-keyword">int</span> size)</span> </span>{
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> I = <span class="hljs-number">0</span>; I &lt; size; I++) {
        data[i] = data[i] * <span class="hljs-number">2</span>;
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>{
    <span class="hljs-keyword">int</span> data[<span class="hljs-number">5</span>] = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>};
    double_array_of_ints(data, <span class="hljs-number">5</span>);
    <span class="hljs-comment">//is data doubled?</span>
}
</code></pre>

<p>^ does data in main contain the doubled values?</p></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light title-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-title" style="width: 100%; font-size: 1rem;">
        <div style=""><h2 id="how">How?</h2></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default" style="width: 100%; font-size: 0.906rem;">
        <div style=""><h2 id="arraysdecaytopointers">Arrays decay to pointers</h2>

<ul>
<li>Arrays point to the memory location which contains the first element</li>
<li>As arrays are contiguous, we can then move through the memory sequentially to find the next values</li>
<li>Very cool!</li>
</ul></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section><section class="fixed-size-headings light default-container wide present has-light-background fitted" data-updated="true" style="display: grid;">

      <div class="header"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      <div class="layout-default media-grid" style="width: 100%; font-size: 1rem;">
        <div style=""><h3 id="feedback">Feedback</h3>
<div class="single-image-wrapper"><figure><img src="images/25t2_lecture_qr.png" class=" size-contain position-center-center"></figure></div></div>
      </div>
      <div class="footnotes"></div>
      <div class="footer"><div class="leading"></div><div class="middle"></div><div class="trailing"></div></div>
      
</section></div>
</div>
<script src="engine/index.js"></script>
<script src="engine/pptxgen.min.js"></script>
<script src="engine/pfill.js"></script>
<script src="engine/published.js"></script>
<script>
Reveal.configure({
progress:true,
progress:true,
dependencies: [
  {
    src: "engine/highlight.js",
    sync: true,
    callback: function () {
      hljs.initHighlightingOnLoad();
    },
  },
],
});
</script>
</body>
</html>
